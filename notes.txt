Player character

Keyboard input
space = jump
gravity needed jump and fall
Floor needs to be created so character won't fall

keyboard input
- pygame.key
- event loop

PYGAME.KEY:
keys = pygame.key.get_pressed()
# a tuple with 0's or 1's if a button is pressed... a dictionary!
space_btn_pressed = keys[pygame.K_SPACE]
if space_btn_pressed:
    print("jump")


EVENT LOOP:
1. check if any button was pressed
2. work with a specific key

if event.type == pygame.KEYDOWN:
    if event.key == pygame.K_SPACE:
        # do stuff here, like character jumping


# PYGAME.DRAW
# draw shapes, lines, or points
# .draw and specify shape. Takes in what to draw ON, color, what to draw
# pygame.draw.line(screen, "Gold", (0, 0), pygame.mouse.get_pos(), width=10)
# pygame.draw.rect(screen, "#c0e8ec", score_rect)  # inner
# pygame.draw.rect(screen, "#c0e8ec", score_rect, width=10)  # boarder

# Draw a circle from scratch
# pygame.draw.ellipse(screen, "Brown", pygame.Rect(50, 200, 100, 100))
# screen.blit(score_surf, score_rect)


# Keyboard input by using pygame.key
# keys = pygame.key.get_pressed()
# # a tuple with 0's or 1's if a button is pressed... a dictionary!
# space_btn_pressed = keys[pygame.K_SPACE]
# if space_btn_pressed:
#     print("jump")



GRAVITY
things fall exponentially, not linearlly
gravity += some value
player.y += gravity

CREATING THE FLOOR
check the y-position of the player
simulate the collision
never let player go below a certain y-value

# MOUSE COLLISION
# collidepoint() takes in a tuple (x, y), mouse_pos is a tuple
# mouse_pos = pygame.mouse.get_pos()
# player_hit_mouse = player_rect.collidepoint(mouse_pos)
# if player_hit_mouse:
#     # print("collision")
#     mouse_btns_bools = pygame.mouse.get_pressed()
#     # (left clicked?, middle clicked?, right clicked?)
#     print(mouse_btns_bools)

# if event.type == pygame.MOUSEMOTION:
# only triggers if you move the mouse
# mouse_position = event.pos
# player_hit_mouse = player_rect.collidepoint(mouse_position)
# if player_hit_mouse:
#         print("collision")
# if event.type == pygame.MOUSEBUTTONUP:
# print("mouse up")
# if event.type == pygame.MOUSEBUTTONDOWN:
#     print("mouse down")

GAME STATES
game and game over
if game_active:
 current game
else:
 game_over

pygame.time.get_ticks()
displays milliseconds since pygame started
1. update score every frame
2. put score on a surface
3. display said surface

timer: custom 'user' event that's triggered in certain intervals
1. create this event
2. tell pygame when to trigger it

ANIMATION
player animation: create our own timer that updates the surface
jumping is just switching surface from walk to jump
walking is switching from image 1 to 2 after 10 frames

obstacle animation: use the inbuild timers to update all obstacle surfaces
using the inbuild timer, like the one we used to spawn the obstacle
everytime it triggers we update all the surfaces for all flies or all snails


THE SPRITE CLASS
A class that has a surface and a rectangle. Easy to draw & update.
So player, snail, and fly should all be their own sprite class.

place sprites in Group or GroupSingle
Then, draw/update all sprites IN that group

2 types of groups
Group is a group for multiple sprites (good for flies and snails)
GroupSingle is a group for a single sprite (good for the player)
And for collisiosn to work, the sprites need to be

player = pygame.sprite.GroupSingle()
player.add(Player())
Later, call .draw() and specify where to draw it
player.draw(screen)

Player() has its own functions you can call.
But actually, you should only want to call 1 function that contains
all the functions you'd want to call
To call them, do:
player.update()
update calls player_input and apply_gravity


SPRITE COLLISIONS
spritecollide(sprite, group, dokill)
sprite should be a sprite
ex: since player is a GroupSingle, do player.sprite
returns a list of collided sprites
